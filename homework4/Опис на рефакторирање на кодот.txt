1. Одвојување на одговорностите (Separation of Concerns)
Овој принцип подразбира дека различни аспекти на програмата треба да бидат одделени и сместени во посебни компоненти, 
кои ќе се фокусираат само на една работа. На пример, ако работиш со податоци, пресметки и сигнали, секој од овие аспекти 
треба да биде одделен во различен модул или класа. Ова го олеснува управувањето со секој дел од програмата, ја прави 
поразбирлива и поефикасна за одржување.

Пример:

Модул за податоци може да се грижи за складирање, вчитување и ажурирање на податоци.
Модул за пресметка на индикатори ќе се фокусира на пресметување на вредности базирани на податоците.
Модул за сигналите ќе се грижи за одлуките кои треба да се донесат на основа на пресметаните индикатори.

Овој принцип овозможува лесно менување на делови од кодот без да се влијае на целиот систем.

2. Модуларност
Модуларноста е процес на поделба на системот во помали, независни делови, наречени модули, кои можат да работат самостојно, 
но и да се комбинираат во поголеми системи. Кога кодот е поделено во модули, секој модул може да се тестира, одржува и 
обновува независно. На овој начин се олеснува управувањето со кодот.

Пример:

Модулите може да бидат различни класи кои имаат конкретни задачи, како што се класи за вчитување на податоци, класи за 
пресметка на индикатори и класите за управување со сигналите.

3. Чист архитектурен стил (MVC)
MVC (Model-View-Controller) е архитектурен шаблон кој дели апликацијата на три главни компоненти:

Model: Содржи логиката за податоци и бизнис логиката. Тука се наоѓаат сите податоци и пресметки, како и начинот на кој тие 
се обработуваат.
View: Ова е делот кој се грижи за презентацијата и интеракцијата со корисникот. Ги прикажува податоците кои доаѓаат од Model 
и ги проследува акциите на корисникот до Controller.
Controller: Контролерот го управува процесот на пресметка, односно ја посредува комуникацијата помеѓу Model и View. Кога 
View ќе примени акција, Контролерот ја процесира и ја проследува на Model, кој потоа се ажурира.